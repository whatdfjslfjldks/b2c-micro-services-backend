// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: user_server.proto

package user_server_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_EmailSendCode_FullMethodName         = "/proto.UserService/EmailSendCode"
	UserService_EmailVerifyCode_FullMethodName       = "/proto.UserService/EmailVerifyCode"
	UserService_UsernameLogin_FullMethodName         = "/proto.UserService/UsernameLogin"
	UserService_TestAccessToken_FullMethodName       = "/proto.UserService/TestAccessToken"
	UserService_TestRefreshToken_FullMethodName      = "/proto.UserService/TestRefreshToken"
	UserService_ChangeUsername_FullMethodName        = "/proto.UserService/ChangeUsername"
	UserService_ChangeEmail_FullMethodName           = "/proto.UserService/ChangeEmail"
	UserService_ChangePassword_FullMethodName        = "/proto.UserService/ChangePassword"
	UserService_ChangePasswordByEmail_FullMethodName = "/proto.UserService/ChangePasswordByEmail"
	UserService_EditUserInfo_FullMethodName          = "/proto.UserService/EditUserInfo"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// 邮箱登录，验证码发送
	EmailSendCode(ctx context.Context, in *EmailSendCodeRequest, opts ...grpc.CallOption) (*EmailSendCodeResponse, error)
	// 邮箱登录/注册，验证码验证,用户名随机生成，密码置空，提醒用户设置密码
	EmailVerifyCode(ctx context.Context, in *EmailVerifyCodeRequest, opts ...grpc.CallOption) (*EmailVerifyCodeResponse, error)
	// 用户名密码登录
	UsernameLogin(ctx context.Context, in *UsernameLoginRequest, opts ...grpc.CallOption) (*UsernameLoginResponse, error)
	// 检测访问令牌是否过期
	TestAccessToken(ctx context.Context, in *TestAccessTokenRequest, opts ...grpc.CallOption) (*TestAccessTokenResponse, error)
	// 检测刷新令牌是否过期，过期返回错，没过期返回访问令牌
	TestRefreshToken(ctx context.Context, in *TestRefreshTokenRequest, opts ...grpc.CallOption) (*TestRefreshTokenResponse, error)
	// 修改用户名,修改之前先 < 调用 token接口 >，判断是否过期
	// TODO 调用接口判断而不是直接在这个接口里面判断，是否妥当？但是我懒得改了，先这样
	ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*ChangeUsernameResponse, error)
	// 修改邮箱 3天内只能修改一次,修改之前先调用token接口，判断是否过期,
	// 先调用方法向以前邮箱发验证码并验证，这个注意，前面写登录的时候需要将
	// 方法封装,此方法只用于最后的信息存储
	ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*ChangeEmailResponse, error)
	// 修改密码,修改之前先调用token接口，判断是否过期
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error)
	// 利用邮箱修改密码,修改之前先调用token接口，判断是否过期
	// TODO 设置密码也用这个接口,忘记密码后重置
	ChangePasswordByEmail(ctx context.Context, in *ChangePasswordByEmailRequest, opts ...grpc.CallOption) (*ChangePasswordByEmailResponse, error)
	// 编辑个人信息,修改之前先调用token接口，判断是否过期
	EditUserInfo(ctx context.Context, in *EditUserInfoRequest, opts ...grpc.CallOption) (*EditUserInfoResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) EmailSendCode(ctx context.Context, in *EmailSendCodeRequest, opts ...grpc.CallOption) (*EmailSendCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailSendCodeResponse)
	err := c.cc.Invoke(ctx, UserService_EmailSendCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EmailVerifyCode(ctx context.Context, in *EmailVerifyCodeRequest, opts ...grpc.CallOption) (*EmailVerifyCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmailVerifyCodeResponse)
	err := c.cc.Invoke(ctx, UserService_EmailVerifyCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UsernameLogin(ctx context.Context, in *UsernameLoginRequest, opts ...grpc.CallOption) (*UsernameLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsernameLoginResponse)
	err := c.cc.Invoke(ctx, UserService_UsernameLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) TestAccessToken(ctx context.Context, in *TestAccessTokenRequest, opts ...grpc.CallOption) (*TestAccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestAccessTokenResponse)
	err := c.cc.Invoke(ctx, UserService_TestAccessToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) TestRefreshToken(ctx context.Context, in *TestRefreshTokenRequest, opts ...grpc.CallOption) (*TestRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestRefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserService_TestRefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*ChangeUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeUsernameResponse)
	err := c.cc.Invoke(ctx, UserService_ChangeUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangeEmail(ctx context.Context, in *ChangeEmailRequest, opts ...grpc.CallOption) (*ChangeEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeEmailResponse)
	err := c.cc.Invoke(ctx, UserService_ChangeEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*ChangePasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordResponse)
	err := c.cc.Invoke(ctx, UserService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePasswordByEmail(ctx context.Context, in *ChangePasswordByEmailRequest, opts ...grpc.CallOption) (*ChangePasswordByEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordByEmailResponse)
	err := c.cc.Invoke(ctx, UserService_ChangePasswordByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) EditUserInfo(ctx context.Context, in *EditUserInfoRequest, opts ...grpc.CallOption) (*EditUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditUserInfoResponse)
	err := c.cc.Invoke(ctx, UserService_EditUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	// 邮箱登录，验证码发送
	EmailSendCode(context.Context, *EmailSendCodeRequest) (*EmailSendCodeResponse, error)
	// 邮箱登录/注册，验证码验证,用户名随机生成，密码置空，提醒用户设置密码
	EmailVerifyCode(context.Context, *EmailVerifyCodeRequest) (*EmailVerifyCodeResponse, error)
	// 用户名密码登录
	UsernameLogin(context.Context, *UsernameLoginRequest) (*UsernameLoginResponse, error)
	// 检测访问令牌是否过期
	TestAccessToken(context.Context, *TestAccessTokenRequest) (*TestAccessTokenResponse, error)
	// 检测刷新令牌是否过期，过期返回错，没过期返回访问令牌
	TestRefreshToken(context.Context, *TestRefreshTokenRequest) (*TestRefreshTokenResponse, error)
	// 修改用户名,修改之前先 < 调用 token接口 >，判断是否过期
	// TODO 调用接口判断而不是直接在这个接口里面判断，是否妥当？但是我懒得改了，先这样
	ChangeUsername(context.Context, *ChangeUsernameRequest) (*ChangeUsernameResponse, error)
	// 修改邮箱 3天内只能修改一次,修改之前先调用token接口，判断是否过期,
	// 先调用方法向以前邮箱发验证码并验证，这个注意，前面写登录的时候需要将
	// 方法封装,此方法只用于最后的信息存储
	ChangeEmail(context.Context, *ChangeEmailRequest) (*ChangeEmailResponse, error)
	// 修改密码,修改之前先调用token接口，判断是否过期
	ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error)
	// 利用邮箱修改密码,修改之前先调用token接口，判断是否过期
	// TODO 设置密码也用这个接口,忘记密码后重置
	ChangePasswordByEmail(context.Context, *ChangePasswordByEmailRequest) (*ChangePasswordByEmailResponse, error)
	// 编辑个人信息,修改之前先调用token接口，判断是否过期
	EditUserInfo(context.Context, *EditUserInfoRequest) (*EditUserInfoResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) EmailSendCode(context.Context, *EmailSendCodeRequest) (*EmailSendCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailSendCode not implemented")
}
func (UnimplementedUserServiceServer) EmailVerifyCode(context.Context, *EmailVerifyCodeRequest) (*EmailVerifyCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailVerifyCode not implemented")
}
func (UnimplementedUserServiceServer) UsernameLogin(context.Context, *UsernameLoginRequest) (*UsernameLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsernameLogin not implemented")
}
func (UnimplementedUserServiceServer) TestAccessToken(context.Context, *TestAccessTokenRequest) (*TestAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAccessToken not implemented")
}
func (UnimplementedUserServiceServer) TestRefreshToken(context.Context, *TestRefreshTokenRequest) (*TestRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestRefreshToken not implemented")
}
func (UnimplementedUserServiceServer) ChangeUsername(context.Context, *ChangeUsernameRequest) (*ChangeUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUsername not implemented")
}
func (UnimplementedUserServiceServer) ChangeEmail(context.Context, *ChangeEmailRequest) (*ChangeEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEmail not implemented")
}
func (UnimplementedUserServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*ChangePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServiceServer) ChangePasswordByEmail(context.Context, *ChangePasswordByEmailRequest) (*ChangePasswordByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePasswordByEmail not implemented")
}
func (UnimplementedUserServiceServer) EditUserInfo(context.Context, *EditUserInfoRequest) (*EditUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserInfo not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_EmailSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailSendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EmailSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_EmailSendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EmailSendCode(ctx, req.(*EmailSendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EmailVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailVerifyCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EmailVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_EmailVerifyCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EmailVerifyCode(ctx, req.(*EmailVerifyCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UsernameLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsernameLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UsernameLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UsernameLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UsernameLogin(ctx, req.(*UsernameLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_TestAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).TestAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_TestAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).TestAccessToken(ctx, req.(*TestAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_TestRefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).TestRefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_TestRefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).TestRefreshToken(ctx, req.(*TestRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeUsername(ctx, req.(*ChangeUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangeEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangeEmail(ctx, req.(*ChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePasswordByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePasswordByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ChangePasswordByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePasswordByEmail(ctx, req.(*ChangePasswordByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_EditUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).EditUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_EditUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).EditUserInfo(ctx, req.(*EditUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmailSendCode",
			Handler:    _UserService_EmailSendCode_Handler,
		},
		{
			MethodName: "EmailVerifyCode",
			Handler:    _UserService_EmailVerifyCode_Handler,
		},
		{
			MethodName: "UsernameLogin",
			Handler:    _UserService_UsernameLogin_Handler,
		},
		{
			MethodName: "TestAccessToken",
			Handler:    _UserService_TestAccessToken_Handler,
		},
		{
			MethodName: "TestRefreshToken",
			Handler:    _UserService_TestRefreshToken_Handler,
		},
		{
			MethodName: "ChangeUsername",
			Handler:    _UserService_ChangeUsername_Handler,
		},
		{
			MethodName: "ChangeEmail",
			Handler:    _UserService_ChangeEmail_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
		{
			MethodName: "ChangePasswordByEmail",
			Handler:    _UserService_ChangePasswordByEmail_Handler,
		},
		{
			MethodName: "EditUserInfo",
			Handler:    _UserService_EditUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_server.proto",
}
