// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: recommend_server.proto

package recommend_server_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecommendService_ClickProduct_FullMethodName    = "/proto.RecommendService/ClickProduct"
	RecommendService_PurchaseProduct_FullMethodName = "/proto.RecommendService/PurchaseProduct"
	RecommendService_SearchProduct_FullMethodName   = "/proto.RecommendService/SearchProduct"
	RecommendService_BrowseProduct_FullMethodName   = "/proto.RecommendService/BrowseProduct"
)

// RecommendServiceClient is the client API for RecommendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TODO 用户产品矩阵
type RecommendServiceClient interface {
	// TODO 数据埋点 点击，购买，搜索，浏览（鼠标悬浮超过一定时间，前端悬浮展示介绍等内容）
	// TODO 行为后端定义( click,purchase...)
	ClickProduct(ctx context.Context, in *ClickProductRequest, opts ...grpc.CallOption) (*ClickProductResponse, error)
	PurchaseProduct(ctx context.Context, in *PurchaseProductRequest, opts ...grpc.CallOption) (*PurchaseProductResponse, error)
	SearchProduct(ctx context.Context, in *SearchProductRequest, opts ...grpc.CallOption) (*SearchProductResponse, error)
	BrowseProduct(ctx context.Context, in *BrowseProductRequest, opts ...grpc.CallOption) (*BrowseProductResponse, error)
}

type recommendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendServiceClient(cc grpc.ClientConnInterface) RecommendServiceClient {
	return &recommendServiceClient{cc}
}

func (c *recommendServiceClient) ClickProduct(ctx context.Context, in *ClickProductRequest, opts ...grpc.CallOption) (*ClickProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClickProductResponse)
	err := c.cc.Invoke(ctx, RecommendService_ClickProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendServiceClient) PurchaseProduct(ctx context.Context, in *PurchaseProductRequest, opts ...grpc.CallOption) (*PurchaseProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseProductResponse)
	err := c.cc.Invoke(ctx, RecommendService_PurchaseProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendServiceClient) SearchProduct(ctx context.Context, in *SearchProductRequest, opts ...grpc.CallOption) (*SearchProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchProductResponse)
	err := c.cc.Invoke(ctx, RecommendService_SearchProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendServiceClient) BrowseProduct(ctx context.Context, in *BrowseProductRequest, opts ...grpc.CallOption) (*BrowseProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BrowseProductResponse)
	err := c.cc.Invoke(ctx, RecommendService_BrowseProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendServiceServer is the server API for RecommendService service.
// All implementations must embed UnimplementedRecommendServiceServer
// for forward compatibility.
//
// TODO 用户产品矩阵
type RecommendServiceServer interface {
	// TODO 数据埋点 点击，购买，搜索，浏览（鼠标悬浮超过一定时间，前端悬浮展示介绍等内容）
	// TODO 行为后端定义( click,purchase...)
	ClickProduct(context.Context, *ClickProductRequest) (*ClickProductResponse, error)
	PurchaseProduct(context.Context, *PurchaseProductRequest) (*PurchaseProductResponse, error)
	SearchProduct(context.Context, *SearchProductRequest) (*SearchProductResponse, error)
	BrowseProduct(context.Context, *BrowseProductRequest) (*BrowseProductResponse, error)
	mustEmbedUnimplementedRecommendServiceServer()
}

// UnimplementedRecommendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecommendServiceServer struct{}

func (UnimplementedRecommendServiceServer) ClickProduct(context.Context, *ClickProductRequest) (*ClickProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickProduct not implemented")
}
func (UnimplementedRecommendServiceServer) PurchaseProduct(context.Context, *PurchaseProductRequest) (*PurchaseProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseProduct not implemented")
}
func (UnimplementedRecommendServiceServer) SearchProduct(context.Context, *SearchProductRequest) (*SearchProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProduct not implemented")
}
func (UnimplementedRecommendServiceServer) BrowseProduct(context.Context, *BrowseProductRequest) (*BrowseProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrowseProduct not implemented")
}
func (UnimplementedRecommendServiceServer) mustEmbedUnimplementedRecommendServiceServer() {}
func (UnimplementedRecommendServiceServer) testEmbeddedByValue()                          {}

// UnsafeRecommendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendServiceServer will
// result in compilation errors.
type UnsafeRecommendServiceServer interface {
	mustEmbedUnimplementedRecommendServiceServer()
}

func RegisterRecommendServiceServer(s grpc.ServiceRegistrar, srv RecommendServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecommendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecommendService_ServiceDesc, srv)
}

func _RecommendService_ClickProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServiceServer).ClickProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendService_ClickProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServiceServer).ClickProduct(ctx, req.(*ClickProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendService_PurchaseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServiceServer).PurchaseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendService_PurchaseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServiceServer).PurchaseProduct(ctx, req.(*PurchaseProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendService_SearchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServiceServer).SearchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendService_SearchProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServiceServer).SearchProduct(ctx, req.(*SearchProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecommendService_BrowseProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrowseProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServiceServer).BrowseProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecommendService_BrowseProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServiceServer).BrowseProduct(ctx, req.(*BrowseProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecommendService_ServiceDesc is the grpc.ServiceDesc for RecommendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecommendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RecommendService",
	HandlerType: (*RecommendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClickProduct",
			Handler:    _RecommendService_ClickProduct_Handler,
		},
		{
			MethodName: "PurchaseProduct",
			Handler:    _RecommendService_PurchaseProduct_Handler,
		},
		{
			MethodName: "SearchProduct",
			Handler:    _RecommendService_SearchProduct_Handler,
		},
		{
			MethodName: "BrowseProduct",
			Handler:    _RecommendService_BrowseProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recommend_server.proto",
}
